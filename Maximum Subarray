class Solution:
def maxSubArray(self, nums):
if not nums:
return 0
return self.divide_and_conquer(nums, 0, len(nums) - 1)
def divide_and_conquer(self, nums, left, right):
if left == right:
return nums[left]
mid = (left + right) // 2
# Recursively find the maximum subarray sum in left and right halves
left_sum = self.divide_and_conquer(nums, left, mid)
right_sum = self.divide_and_conquer(nums, mid + 1, right)
# Find the maximum subarray sum crossing from left to right
cross_sum = self.max_crossing_sum(nums, left, right, mid)
return max(left_sum, right_sum, cross_sum)
def max_crossing_sum(self, nums, left, right, mid):
# Calculate the maximum subarray sum that crosses the midpoint
left_sum = float('-inf')
curr_sum = 0
# Traverse from mid to left to find the maximum sum of the left subarray
for i in range(mid, left - 1, -1):
curr_sum += nums[i]
if curr_sum > left_sum:
left_sum = curr_sum
right_sum = float('-inf')
curr_sum = 0
# Traverse from mid+1 to right to find the maximum sum of the right subarray
for i in range(mid + 1, right + 1):
curr_sum += nums[i]
if curr_sum > right_sum:
right_sum = curr_sum
# Return the sum of the maximum subarray crossing the midpoint
return left_sum + right_sum
# Example usage:
nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
sol = Solution()
print(sol.maxSubArray(nums)) # Output: 6 (corresponding to [4, -1, 2, 1])
